subset_taxa(
Family  != "mitochondria" &
Class   != "Chloroplast" &
Phylum != "Cyanobacteria/Chloroplast"
)
ps2 # Confirm that the taxa were removed
# Prevelance estimation
# Calculate feature prevelance across the data set
prevdf <- apply(X = otu_table(ps2),MARGIN = ifelse(taxa_are_rows(ps2), yes = 1, no = 2),FUN = function(x){sum(x > 0)})
# Add taxonomy and total read counts to prevdf
prevdf <- data.frame(Prevalence = prevdf, TotalAbundance = taxa_sums(ps2), tax_table(ps2))
# Create a table of Phylum, their mean abundances across all samples, and the number of samples they were detected in
plyr::ddply(prevdf, "Phylum", function(df1){cbind(mean(df1$Prevalence),sum(df1$Prevalence))})
# Reorder based on visual inspection of relative dominance of each taxa for plotting
prevdf$Phylum <- factor(prevdf$Phylum, levels = c("Firmicutes", "Actinobacteria", "Proteobacteria", "Bacteroidetes", "Verrucomicrobia", "Fusobacteria", "Deinococcus-Thermus", "Euryarchaeota", "Deferribacteres", "Lentisphaerae", "Spirochaetes", "Synergistetes", "Tenericutes"))
#Prevalence plot
prevdf1 <- subset(prevdf, Phylum %in% get_taxa_unique(ps2, "Phylum"))
p.prevdf1 <- ggplot(prevdf1, aes(TotalAbundance, Prevalence / nsamples(ps2),color=Genus)) +
geom_hline(yintercept = 0.03, alpha = 0.5, linetype = 2) +
geom_point(size = 3, alpha = 0.7) +
scale_x_log10() +
xlab("Total Abundance") + ylab("Prevalence [Frac. Samples]") +
facet_wrap(~Phylum) +
theme(legend.position="none") +
ggtitle("Phylum Prevelence in All Samples\nColored by Genus")
p.prevdf1
# Chunk 8: taxon-cleaning
# Remove specific taxa
# Define a variable with taxa to remove
get_taxa_unique(ps2, "Phylum")
filterPhyla = c("Lentisphaerae", "Spirochaetes", "Synergistetes", "Deinococcus-Thermus", "Deferribacteres", "Tenericutes", "Euryarchaeota", "Verrucomicrobia", "Fusobacteria")
ps2 # Check the number of taxa prior to removal
ps2 <- subset_taxa(ps2, !Phylum %in% filterPhyla)
ps2 # Confirm the taxa were removed
get_taxa_unique(ps2, "Phylum")
summary(ps2)
# Chunk 9: Normalization
##### Normalization #######
# Scales reads by
# 1) taking proportions,
# 2) multiplying by a given library size of n
# 3) rounding down
scale_reads <- function(physeq, n) {
physeq.scale <-
transform_sample_counts(physeq, function(x) {
(n * x/sum(x))
})
otu_table(physeq.scale) <- floor(otu_table(physeq.scale))
physeq.scale <- prune_taxa(taxa_sums(physeq.scale) > 0, physeq.scale)
return(physeq.scale)
}
# Chunk 10: assign color to each phylum
Phylumcolor<-c("Actinobacteria"="#c51b7d","Bacteroidetes"= "#e9a3c9", "Firmicutes"= "#fde0ef", "Proteobacteria"="#a1d76a")
# Chunk 11: pre- vs. post-vaccionation samples @ Dose 1
# # # samples with pre & post
# # subjectID
# # s47
# # s110
# # s116
# # s149
# # s182
# # s238
# # s442
# # s53
# # s131
# # s248
# # s100
# # s102
# # s59
# # s441
# # s372
#
# prepost_ps <- scale_reads(ps2, 1e5)
#
# levels(sample_data(prepost_ps)$vaccination_proximity)
# prepost_ps_DS1 <- subset_samples(prepost_ps, vaccination_proximity == "DS1")
# levels(sample_data(prepost_ps_DS1)$vaccination_proximity)
#
# prepost_ps_DS1 <- subset_samples(prepost_ps_DS1, subjectID == "s47" | subjectID == "s110" | subjectID == "s116" | subjectID == "s149" | subjectID == "s182" | subjectID == "s238" | subjectID == "s442" | subjectID == "s53" | subjectID == "s131" | subjectID == "s248" | subjectID == "s100" | subjectID == "s102" | subjectID == "s59" | subjectID == "s441" | subjectID == "372")
#
# prepost_ps_DS1 <- subset_samples(prepost_ps_DS1, stool_number == "1" | stool_number == "2")
#
# # Calculate relative abundance
# threshold = 0.01
#
# prepost_ps_DS1_phylum <- prepost_ps_DS1 %>%
#   tax_glom(taxrank = "Phylum") %>%                     # agglomerate at class level
#   transform_sample_counts(function(x) {x/sum(x)} ) %>% # Transform to rel. abundance
#   psmelt() %>%                                         # Melt to long format
#   filter(Abundance > threshold) %>%                    # Filter out low abundance taxa
#   arrange(Phylum, Abundance)                           # Sort data frame alphabetically by phylum
#
# # plot relative abundance between pre- & post-vaccination samples @ Dose 1
# prepost_phylum_RA <- ggplot(prepost_ps_DS1_phylum, aes(x = as.factor(subjectID), y = Abundance, fill = Phylum)) + theme_bw() +
#   geom_bar(stat = "identity", width = 0.85, position="fill") +
#   facet_wrap(seroconversion~pre_post, scales = "free_x", nrow=1)+
#   labs(title= "", y = "Relative abundance", x = "") +
#   theme(legend.position = "bottom",  panel.grid = element_blank()) +
#   theme(plot.title = element_text(hjust=0, angle = 0, family= "Arial", size = 12, face="bold"), axis.text = element_text(angle = 90, family= "Arial", size = 12), plot.margin=unit(c(0,0,0,0), "cm"))+
#   scale_fill_manual(values = Phylumcolor)
# prepost_phylum_RA
#
# # plot relative abundance boxplot of each phyla
# prepost_phylum_RA_box <- ggboxplot(prepost_ps_DS1_phylum, x = "pre_post", y = "Abundance", outlier.shape = NA, add = "jitter", color = "pre_post") +
#   facet_wrap(seroconversion~Phylum, nrow = 1) +
#   stat_compare_means(label = "p.signif", label.x= 2.0, label.y=1.1) +
#   ylim(0,1.2) +
#   labs(x="", y = "Dose 1\n")+
#   theme(plot.title = element_text(hjust=0), axis.text = element_text(angle = 0, family= "Arial", size = 10))+
#   theme(panel.grid.major = element_line(), panel.grid.minor = element_line())
# prepost_phylum_RA_box
#
# # run statistical test
# prepost_wilcox <- prepost_ps_DS1_phylum %>%
# group_by(Phylum) %>%
# wilcox_test(formula = Abundance~pre_post)
# prepost_wilcox
#
# # alpha diversity
# # Calculate Alpha Diversity
# # prepost_alpha_calc <- estimate_richness(prepost_ps_DS1, measures = c("Observed", "Shannon"))
# #
# # write.table(prepost_alpha_calc, file = "prepost_alpha_calc.txt", sep = "\t", row.names = TRUE, col.names = NA)
#
# prepost_alpha_calc <- read.delim(file.choose())
#
# # Merge with sample data
# # prepost_alpha_df <- as.data.frame(sample_data(prepost_ps_DS1))
# # write.table(prepost_alpha_df, file = "prepost_alpha_df.txt", sep = "\t", row.names = TRUE, col.names = NA)
# prepost_alpha_df <- read.delim(file.choose())
#
# prepost_alpha <- merge(prepost_alpha_calc, prepost_alpha_df, by = "seq_id")
#
# levels(prepost_alpha$pre_post)
# prepost_alpha$pre_post <- factor(prepost_alpha$pre_post, levels = c("pre", "post"))
# levels(prepost_alpha$pre_post)
#
# # Plot
# prepost_rich <- ggboxplot(prepost_alpha, x = "pre_post", y = "Observed", add = "jitter", color="pre_post", outlier.shape = NA) +
#   stat_compare_means(method = "wilcox.test", hide.ns = FALSE, label = "p.format", label.x= 2.0, label.y=100) +
#   labs(title= "Richness", x= "", y = "") +
#    theme(plot.title = element_text(hjust=0.5, angle = 0, family= "Arial", size = 10), legend.position= "none", axis.text = element_text(angle = 0, family= "Arial", size = 10), plot.margin=unit(c(0.2,0,-0.5,0), "cm"))+
#   ylim(0,100)
#
# prepost_shannon <- ggboxplot(prepost_alpha, x = "pre_post", y = "Shannon", add = "jitter", color="pre_post", outlier.shape = NA) +
#   stat_compare_means(method = "wilcox.test", hide.ns = FALSE, label = "p.format", label.x= 2.0, label.y=5) +
#   labs(title= "Shannon", x= "", y = "") +
#    theme(plot.title = element_text(hjust=0.5, angle = 0, family= "Arial", size = 10), legend.position= "none", axis.text = element_text(angle = 0, family= "Arial", size = 10), plot.margin=unit(c(0.2,0,-0.5,0), "cm"))+
#    ylim(0,5)
#
# prepost_alpha_fig <- ggarrange(prepost_rich, prepost_shannon, ncol=2 )
#
# # beta diversity
#
# ord.psm.prepost.wuni <- ordinate(prepost_ps_DS1, method = "PCoA", distance = "wunifrac")
# evals.wuni.prepost <- ord.psm.prepost.wuni$values$Eigenvalues #Update
#
# # PCoA plots
# p.ord.wuni.prepost <- plot_ordination(prepost_ps_DS1, ord.psm.prepost.wuni, color = "pre_post") +
# labs(title= "", color = "pre_post")+
#    theme(plot.title = element_text(hjust=0.5, angle = 0, family= "Arial", size = 10), legend.position= "bottom", axis.text = element_text(angle = 0, family= "Arial", size = 10))+
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
# panel.background = element_blank(), axis.line = element_line(colour = "black"))+
#     geom_hline(yintercept = 0, alpha = 0.5, linetype = 2) +
#    geom_vline(xintercept = 0, alpha = 0.5, linetype = 2)
# p.ord.wuni.prepost
#
# # run adonis
#
# pruned.prepost <- prune_taxa(taxa_sums(prepost_ps_DS1) > 0, prepost_ps_DS1)
# pruned.prepost <- prune_samples(sample_sums(pruned.prepost) > 0, prepost_ps_DS1)
#
# sd.prepost <- data.frame(sample_data(pruned.prepost))
#
# # Adonis test
# ds1.bray <- phyloseq::distance(pruned.prepost, method = "wunifrac")
# vegan::adonis2(ds1.bray ~ pre_post, data = sd.prepost)
# Chunk 12: average-ASV-per-subject-per-dose
###### Merge functions ############
#Merge samples by averaging OTU countsinstead of summing
merge_samples_mean <- function(physeq, group){
# Calculate the number of samples in each group
group_sums <- as.matrix(table(sample_data(physeq)[ ,group]))[,1]
# Merge samples by summing
merged <- merge_samples(physeq, group)
# Divide summed OTU counts by number of samples in each group to get mean
# Calculation is done while taxa are columns
x <- as.matrix(otu_table(merged))
if(taxa_are_rows(merged)){ x<-t(x) }
out <- floor(t(x/group_sums))
# Return new phyloseq object with
out <- otu_table(out, taxa_are_rows = TRUE)
otu_table(merged) <- out
return(merged)
}
# Sacle Reads
ps3 <- scale_reads(ps2, 1e5)
# Subset by dose
levels(sample_data(ps3)$vaccination_proximity)
ps3.DS1 <- subset_samples(ps3, vaccination_proximity == "DS1")
levels(sample_data(ps3.DS1)$vaccination_proximity)
summary(taxa_sums(ps3.DS1))
ps3.DS1 <- prune_taxa(taxa_sums(ps3.DS1)>0, ps3.DS1)
summary(taxa_sums(ps3.DS1))
ps3.DS2 <- subset_samples(ps3, vaccination_proximity == "DS2")
levels(sample_data(ps3.DS2)$vaccination_proximity)
summary(taxa_sums(ps3.DS2))
ps3.DS2 <- prune_taxa(taxa_sums(ps3.DS2)>0, ps3.DS2)
summary(taxa_sums(ps3.DS2))
ps3.DS3 <- subset_samples(ps3, vaccination_proximity == "DS3")
levels(sample_data(ps3.DS3)$vaccination_proximity)
summary(taxa_sums(ps3.DS3))
ps3.DS3 <- prune_taxa(taxa_sums(ps3.DS3)>0, ps3.DS3)
summary(taxa_sums(ps3.DS3))
# Count number of subjects
length(unique(sample_data(ps3)$subjectID))
length(unique(sample_data(ps3.DS1)$subjectID))
length(unique(sample_data(ps3.DS2)$subjectID))
length(unique(sample_data(ps3.DS3)$subjectID))
# Transform all variables to factors just in case...
df <- as.data.frame(lapply(sample_data(ps3),function (y) if(class(y)!="factor" ) as.factor(y) else y),stringsAsFactors=T)
row.names(df) <- sample_names(ps3)
sample_data(ps3) <- sample_data(df)
df_DS1 <- as.data.frame(lapply(sample_data(ps3.DS1),function (y) if(class(y)!="factor" ) as.factor(y) else y),stringsAsFactors=T)
row.names(df_DS1) <- sample_names(ps3.DS1)
sample_data(ps3.DS1) <- sample_data(df_DS1)
df_DS2 <- as.data.frame(lapply(sample_data(ps3.DS2),function (y) if(class(y)!="factor" ) as.factor(y) else y),stringsAsFactors=T)
row.names(df_DS2) <- sample_names(ps3.DS2)
sample_data(ps3.DS2) <- sample_data(df_DS2)
df_DS3 <- as.data.frame(lapply(sample_data(ps3.DS3),function (y) if(class(y)!="factor" ) as.factor(y) else y),stringsAsFactors=T)
row.names(df_DS3) <- sample_names(ps3.DS3)
sample_data(ps3.DS3) <- sample_data(df_DS3)
# Merge samples on subjectID
psm <- merge_samples_mean(ps3, "subjectID")
nsamples(psm)
length(unique(sample_data(ps3)$subjectID))
psm.DS1 <- merge_samples_mean(ps3.DS1, "subjectID")
nsamples(psm.DS1)
length(unique(sample_data(ps3.DS1)$subjectID))
psm.DS2 <- merge_samples_mean(ps3.DS2, "subjectID")
nsamples(psm.DS2)
length(unique(sample_data(ps3.DS2)$subjectID))
psm.DS3 <- merge_samples_mean(ps3.DS3, "subjectID")
nsamples(psm.DS3)
length(unique(sample_data(ps3.DS3)$subjectID))
# 'fix' subject ids by renaming merged subjectID with rownames
# 'fix' seroconversion
sample_data(psm.DS1)$subjectID
sample_data(psm.DS1)$subjectID <- rownames(sample_data(psm.DS1))
sample_data(psm.DS1)$subjectID
sample_data(psm.DS1)$seroconversion
sample_data(psm.DS1)$seroconversion <-  factor(sample_data(psm.DS1)$seroconversion, labels = c("No","Yes"))
sample_data(psm.DS1)$seroconversion
sample_data(psm.DS1)$vaccination_proximity
sample_data(psm.DS1)$vaccination_proximity <- "DS1"
sample_data(psm.DS1)$vaccination_proximity
sample_data(psm.DS2)$subjectID
sample_data(psm.DS2)$subjectID <- rownames(sample_data(psm.DS2))
sample_data(psm.DS2)$seroconversion
sample_data(psm.DS2)$seroconversion <- factor(sample_data(psm.DS2)$seroconversion, labels = c("No", "Yes"))
sample_data(psm.DS2)$vaccination_proximity
sample_data(psm.DS2)$vaccination_proximity <- "DS2"
sample_data(psm.DS2)$subjectID
sample_data(psm.DS2)$seroconversion
sample_data(psm.DS2)$vaccination_proximity
sample_data(psm.DS3)$subjectID
sample_data(psm.DS3)$subjectID <- rownames(sample_data(psm.DS3))
sample_data(psm.DS3)$seroconversion
sample_data(psm.DS3)$seroconversion <- factor(sample_data(psm.DS3)$seroconversion, labels = c("No", "Yes"))
sample_data(psm.DS3)$vaccination_proximity
sample_data(psm.DS3)$vaccination_proximity <- "DS3"
sample_data(psm.DS3)$subjectID
sample_data(psm.DS3)$seroconversion
sample_data(psm.DS3)$vaccination_proximity
# Chunk 13: IgA distribution @ Dose 1
averaged_raw <- psm.DS1 %>%
psmelt() %>%
mutate(postvaccination_IgA_titer = as.numeric(postvaccination_IgA_titer)) %>%
arrange(postvaccination_IgA_titer)
#get the correct order
new.order <- psm.DS1 %>%
psmelt() %>%
arrange(postvaccination_IgA_titer) %>%
distinct(subjectID) %>%
deframe()
averaged_raw$subjectID <- factor(averaged_raw$subjectID,levels = new.order)
IgA_distri <- ggplot(averaged_raw, aes(x = subjectID, y = postvaccination_IgA_titer, fill=seroconversion))+
theme_bw() +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 90))
IgA_distri
IgA_box <- ggplot(averaged_raw, aes(x = seroconversion, y = postvaccination_IgA_titer, fill=seroconversion))+
theme_bw() +
geom_boxplot()+
geom_point()
IgA_box
setwd("~/Desktop/WashU/Projects/Handley_Lab/Rotabiome/Manuscript/Submissions/1st_Cell_host_microbe_20210603/Rotabiome_clean_Rmd/Rotabiome_Phageome_Rmd")
# Chunk 1: setup
library(tidyverse)
library(data.table)
library(phyloseq)
library(rstatix)
library(vegan)
library(ggpubr)
theme_set(theme_bw())
# Chunk 2: import
# Read in count table
counts <- column_to_rownames(read_tsv(file = "./rotabiome_phage_counts.tsv"), var = "contig")
# Read in CAT taxonomy table
tax.tbl <- fread("./contig_taxonomy.tsv", header = TRUE, stringsAsFactors = TRUE, fill = TRUE)
tax.tbl.m <- tax.tbl %>%
column_to_rownames(var = "contig") %>%
as.matrix()
# Read in sample data
MAP <- import_qiime_sample_data("./mapping_rotabiome_virome.txt")
sample_names(MAP)
# Create PhyloSeq object
OTU <- otu_table(counts, taxa_are_rows = TRUE)
TAX <- tax_table(tax.tbl.m)
ps0 = phyloseq(OTU, TAX, MAP)
ps0
rank_names(ps0)
get_taxa_unique(ps0, "order")
saveRDS(ps0, file = "./phage_ps0.RDS")
# Chunk 3: read-rds
df <- readRDS("./phage_ps0.RDS")
# Chunk 4: factor-adjustments
# Convert factors into numeric
sample_data(ps0)$age_stool_collection <- as.numeric(as.character(sample_data(ps0)$age_stool_collection))
sample_data(ps0)$days_pre_or_post_vaccination <- as.numeric(as.character(sample_data(ps0)$days_pre_or_post_vaccination))
sample_data(ps0)$age_at_first_vac <- as.numeric(as.character(sample_data(ps0)$age_at_first_vac))
sample_data(ps0)$age_at_final_vac <- as.numeric(as.character(sample_data(ps0)$age_at_final_vac))
sample_data(ps0)$age_at_blood_draw <- as.numeric(as.character(sample_data(ps0)$age_at_blood_draw))
sample_data(ps0)$days_between_last_vaccination_and_blood_draw <- as.numeric(as.character(sample_data(ps0)$days_between_last_vaccination_and_blood_draw))
sample_data(ps0)$height_cm <- as.numeric(as.character(sample_data(ps0)$height_cm))
sample_data(ps0)$weight_kg <- as.numeric(as.character(sample_data(ps0)$weight_kg))
sample_data(ps0)$postvaccination_IgA_titer <- as.numeric(as.character(sample_data(ps0)$postvaccination_IgA_titer))
sample_data(ps0)$seroconversion <- as.factor(sample_data(ps0)$seroconversion)
# Chunk 5: average-ASV-per-subject-per-dose
##### Normalization #######
# Scales reads by
# 1) taking proportions,
# 2) multiplying by a given library size of n
# 3) rounding down
scale_reads <- function(physeq, n) {
physeq.scale <-
transform_sample_counts(physeq, function(x) {
(n * x/sum(x))
})
otu_table(physeq.scale) <- floor(otu_table(physeq.scale))
physeq.scale <- prune_taxa(taxa_sums(physeq.scale) > 0, physeq.scale)
return(physeq.scale)
}
# Chunk 6: assign color to each family
Familycolor<-c("Ackermannviridae"="#c51b7d","Herelleviridae"= "#e9a3c9", "Myoviridae"= "#fde0ef", "not classified"="#e6f5d0", "Podoviridae"="#a1d76a", "Siphoviridae"="#4d9221")
prepost_ps <- scale_reads(ps0, 1e2)
levels(sample_data(prepost_ps)$vaccination_proximity)
prepost_ps_DS1 <- subset_samples(prepost_ps, vaccination_proximity == "DS1")
levels(sample_data(prepost_ps_DS1)$vaccination_proximity)
prepost_ps_DS1 <- subset_samples(prepost_ps_DS1, subjectID == "s47" | subjectID == "s110" | subjectID == "s116" | subjectID == "s149" | subjectID == "s182" | subjectID == "s238" | subjectID == "s442" | subjectID == "s53" | subjectID == "s131" | subjectID == "s248" | subjectID == "s100" | subjectID == "s102" | subjectID == "s59" | subjectID == "s441" | subjectID == "372")
prepost_ps_DS1 <- subset_samples(prepost_ps_DS1, stool_number == "1" | stool_number == "2")
prepost_ps_DS1 <- subset_taxa(prepost_ps_DS1, superkingdom == "Phage")
# Calculate relative abundance
threshold = 0.01
prepost_ps_DS1_Family <- prepost_ps_DS1 %>%
tax_glom(taxrank = "family") %>%                     # agglomerate at class level
transform_sample_counts(function(x) {x/sum(x)} ) %>% # Transform to rel. abundance
psmelt() %>%                                         # Melt to long format
filter(Abundance > threshold) %>%                    # Filter out low abundance taxa
arrange(family, Abundance)                           # Sort data frame alphabetically by phylum
# plot relative abundance between pre- & post-vaccination samples @ Dose 1
prepost_family_RA <- ggplot(prepost_ps_DS1_Family, aes(x = as.factor(subjectID), y = Abundance, fill = family)) + theme_bw() +
geom_bar(stat = "identity", width = 0.85, position="fill") +
facet_wrap(seroconversion~pre_post, scales = "free_x", nrow=1)+
labs(title= "", y = "Relative abundance", x = "") +
theme(legend.position = "bottom",  panel.grid = element_blank()) +
theme(plot.title = element_text(hjust=0, angle = 0, family= "Arial", size = 12, face="bold"), axis.text = element_text(angle = 90, family= "Arial", size = 12), plot.margin=unit(c(0,0,0,0), "cm"))+
scale_fill_manual(values = Familycolor)
prepost_family_RA
# plot relative abundance boxplot of each phyla
prepost_phylum_RA_box <- ggboxplot(prepost_ps_DS1_Family, x = "pre_post", y = "Abundance", outlier.shape = NA, add = "jitter", color = "pre_post") +
facet_wrap(seroconversion~family, nrow = 1) +
stat_compare_means(label = "p.signif", label.x= 2.0, label.y=1.1) +
ylim(0,1.2) +
labs(x="", y = "Dose 1\n")+
theme(plot.title = element_text(hjust=0), axis.text = element_text(angle = 0, family= "Arial", size = 10))+
theme(panel.grid.major = element_line(), panel.grid.minor = element_line())
prepost_phylum_RA_box
# run statistical test
prepost_wilcox <- prepost_ps_DS1_Family %>%
group_by(family) %>%
wilcox_test(formula = Abundance~pre_post)
prepost_wilcox
# alpha diversity
# Calculate Alpha Diversity
prepost_alpha_calc <- estimate_richness(prepost_ps_DS1, measures = c("Observed", "Shannon"))
prepost_alpha_calc <- read.delim(file.choose())
# Chunk 1: setup
library(tidyverse)
library(data.table)
library(phyloseq)
library(rstatix)
library(vegan)
library(ggpubr)
theme_set(theme_bw())
# Chunk 2: import
# Read in count table
counts <- column_to_rownames(read_tsv(file = "./rotabiome_phage_counts.tsv"), var = "contig")
# Read in CAT taxonomy table
tax.tbl <- fread("./contig_taxonomy.tsv", header = TRUE, stringsAsFactors = TRUE, fill = TRUE)
tax.tbl.m <- tax.tbl %>%
column_to_rownames(var = "contig") %>%
as.matrix()
# Read in sample data
MAP <- import_qiime_sample_data("./mapping_rotabiome_virome.txt")
sample_names(MAP)
# Create PhyloSeq object
OTU <- otu_table(counts, taxa_are_rows = TRUE)
TAX <- tax_table(tax.tbl.m)
ps0 = phyloseq(OTU, TAX, MAP)
ps0
rank_names(ps0)
get_taxa_unique(ps0, "order")
saveRDS(ps0, file = "./phage_ps0.RDS")
# Chunk 3: read-rds
df <- readRDS("./phage_ps0.RDS")
# Chunk 4: factor-adjustments
# Convert factors into numeric
sample_data(ps0)$age_stool_collection <- as.numeric(as.character(sample_data(ps0)$age_stool_collection))
sample_data(ps0)$days_pre_or_post_vaccination <- as.numeric(as.character(sample_data(ps0)$days_pre_or_post_vaccination))
sample_data(ps0)$age_at_first_vac <- as.numeric(as.character(sample_data(ps0)$age_at_first_vac))
sample_data(ps0)$age_at_final_vac <- as.numeric(as.character(sample_data(ps0)$age_at_final_vac))
sample_data(ps0)$age_at_blood_draw <- as.numeric(as.character(sample_data(ps0)$age_at_blood_draw))
sample_data(ps0)$days_between_last_vaccination_and_blood_draw <- as.numeric(as.character(sample_data(ps0)$days_between_last_vaccination_and_blood_draw))
sample_data(ps0)$height_cm <- as.numeric(as.character(sample_data(ps0)$height_cm))
sample_data(ps0)$weight_kg <- as.numeric(as.character(sample_data(ps0)$weight_kg))
sample_data(ps0)$postvaccination_IgA_titer <- as.numeric(as.character(sample_data(ps0)$postvaccination_IgA_titer))
sample_data(ps0)$seroconversion <- as.factor(sample_data(ps0)$seroconversion)
# Chunk 5: average-ASV-per-subject-per-dose
##### Normalization #######
# Scales reads by
# 1) taking proportions,
# 2) multiplying by a given library size of n
# 3) rounding down
scale_reads <- function(physeq, n) {
physeq.scale <-
transform_sample_counts(physeq, function(x) {
(n * x/sum(x))
})
otu_table(physeq.scale) <- floor(otu_table(physeq.scale))
physeq.scale <- prune_taxa(taxa_sums(physeq.scale) > 0, physeq.scale)
return(physeq.scale)
}
# Chunk 6: assign color to each family
Familycolor<-c("Ackermannviridae"="#c51b7d","Herelleviridae"= "#e9a3c9", "Myoviridae"= "#fde0ef", "not classified"="#e6f5d0", "Podoviridae"="#a1d76a", "Siphoviridae"="#4d9221")
prepost_ps <- scale_reads(ps0, 1e2)
levels(sample_data(prepost_ps)$vaccination_proximity)
prepost_ps_DS1 <- subset_samples(prepost_ps, vaccination_proximity == "DS1")
levels(sample_data(prepost_ps_DS1)$vaccination_proximity)
prepost_ps_DS1 <- subset_samples(prepost_ps_DS1, subjectID == "s47" | subjectID == "s110" | subjectID == "s116" | subjectID == "s149" | subjectID == "s182" | subjectID == "s238" | subjectID == "s442" | subjectID == "s53" | subjectID == "s131" | subjectID == "s248" | subjectID == "s100" | subjectID == "s102" | subjectID == "s59" | subjectID == "s441" | subjectID == "372")
prepost_ps_DS1 <- subset_samples(prepost_ps_DS1, stool_number == "1" | stool_number == "2")
prepost_ps_DS1 <- subset_taxa(prepost_ps_DS1, superkingdom == "Phage")
# Calculate relative abundance
threshold = 0.01
prepost_ps_DS1_Family <- prepost_ps_DS1 %>%
tax_glom(taxrank = "family") %>%                     # agglomerate at class level
transform_sample_counts(function(x) {x/sum(x)} ) %>% # Transform to rel. abundance
psmelt() %>%                                         # Melt to long format
filter(Abundance > threshold) %>%                    # Filter out low abundance taxa
arrange(family, Abundance)                           # Sort data frame alphabetically by phylum
# plot relative abundance between pre- & post-vaccination samples @ Dose 1
prepost_family_RA <- ggplot(prepost_ps_DS1_Family, aes(x = as.factor(subjectID), y = Abundance, fill = family)) + theme_bw() +
geom_bar(stat = "identity", width = 0.85, position="fill") +
facet_wrap(seroconversion~pre_post, scales = "free_x", nrow=1)+
labs(title= "", y = "Relative abundance", x = "") +
theme(legend.position = "bottom",  panel.grid = element_blank()) +
theme(plot.title = element_text(hjust=0, angle = 0, family= "Arial", size = 12, face="bold"), axis.text = element_text(angle = 90, family= "Arial", size = 12), plot.margin=unit(c(0,0,0,0), "cm"))+
scale_fill_manual(values = Familycolor)
prepost_family_RA
# plot relative abundance boxplot of each phyla
prepost_phylum_RA_box <- ggboxplot(prepost_ps_DS1_Family, x = "pre_post", y = "Abundance", outlier.shape = NA, add = "jitter", color = "pre_post") +
facet_wrap(seroconversion~family, nrow = 1) +
stat_compare_means(label = "p.signif", label.x= 2.0, label.y=1.1) +
ylim(0,1.2) +
labs(x="", y = "Dose 1\n")+
theme(plot.title = element_text(hjust=0), axis.text = element_text(angle = 0, family= "Arial", size = 10))+
theme(panel.grid.major = element_line(), panel.grid.minor = element_line())
prepost_phylum_RA_box
prepost_alpha_calc <- read.delim(file.choose())
# Merge with sample data
# prepost_alpha_df <- as.data.frame(sample_data(prepost_ps_DS1))
# write.table(prepost_alpha_df, file = "prepost_alpha_df.txt", sep = "\t", row.names = TRUE, col.names = NA)
prepost_alpha_df <- read.delim(file.choose())
prepost_alpha <- merge(prepost_alpha_calc, prepost_alpha_df, by = "seq_id")
levels(prepost_alpha$pre_post)
prepost_alpha$pre_post <- factor(prepost_alpha$pre_post, levels = c("pre", "post"))
levels(prepost_alpha$pre_post)
prepost_alpha
# Plot
prepost_rich <- ggboxplot(prepost_alpha, x = "pre_post", y = "Observed", add = "jitter", color="pre_post", outlier.shape = NA) +
stat_compare_means(method = "wilcox.test", hide.ns = FALSE, label = "p.format", label.x= 2.0, label.y=10) +
labs(title= "Richness", x= "", y = "") +
theme(plot.title = element_text(hjust=0.5, angle = 0, family= "Arial", size = 10), legend.position= "none", axis.text = element_text(angle = 0, family= "Arial", size = 10), plot.margin=unit(c(0.2,0,-0.5,0), "cm"))+
ylim(0,10)
prepost_rich
prepost_shannon <- ggboxplot(prepost_alpha, x = "pre_post", y = "Shannon", add = "jitter", color="pre_post", outlier.shape = NA) +
stat_compare_means(method = "wilcox.test", hide.ns = FALSE, label = "p.format", label.x= 2.0, label.y=5) +
labs(title= "Shannon", x= "", y = "") +
theme(plot.title = element_text(hjust=0.5, angle = 0, family= "Arial", size = 10), legend.position= "none", axis.text = element_text(angle = 0, family= "Arial", size = 10), plot.margin=unit(c(0.2,0,-0.5,0), "cm"))+
ylim(0,5)
prepost_alpha_fig <- ggarrange(prepost_rich, prepost_shannon, ncol=2 )
prepost_alpha_fig
