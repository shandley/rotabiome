ps3.DS2 <- prune_taxa(taxa_sums(ps3.DS2)>0, ps3.DS2)
summary(taxa_sums(ps3.DS2))
ps3.DS3 <- subset_samples(ps3, vaccination_proximity == "DS3")
levels(sample_data(ps3.DS3)$vaccination_proximity)
summary(taxa_sums(ps3.DS3))
ps3.DS3 <- prune_taxa(taxa_sums(ps3.DS3)>0, ps3.DS3)
summary(taxa_sums(ps3.DS3))
# Count number of subjects
length(unique(sample_data(ps3)$subjectID))
length(unique(sample_data(ps3.DS1)$subjectID))
length(unique(sample_data(ps3.DS2)$subjectID))
length(unique(sample_data(ps3.DS3)$subjectID))
# Transform all variables to factors just in case...
df <- as.data.frame(lapply(sample_data(ps3),function (y) if(class(y)!="factor" ) as.factor(y) else y),stringsAsFactors=T)
row.names(df) <- sample_names(ps3)
sample_data(ps3) <- sample_data(df)
df_DS1 <- as.data.frame(lapply(sample_data(ps3.DS1),function (y) if(class(y)!="factor" ) as.factor(y) else y),stringsAsFactors=T)
row.names(df_DS1) <- sample_names(ps3.DS1)
sample_data(ps3.DS1) <- sample_data(df_DS1)
df_DS2 <- as.data.frame(lapply(sample_data(ps3.DS2),function (y) if(class(y)!="factor" ) as.factor(y) else y),stringsAsFactors=T)
row.names(df_DS2) <- sample_names(ps3.DS2)
sample_data(ps3.DS2) <- sample_data(df_DS2)
df_DS3 <- as.data.frame(lapply(sample_data(ps3.DS3),function (y) if(class(y)!="factor" ) as.factor(y) else y),stringsAsFactors=T)
row.names(df_DS3) <- sample_names(ps3.DS3)
sample_data(ps3.DS3) <- sample_data(df_DS3)
# Merge samples on subjectID
psm <- merge_samples_mean(ps3, "subjectID")
nsamples(psm)
length(unique(sample_data(ps3)$subjectID))
psm.DS1 <- merge_samples_mean(ps3.DS1, "subjectID")
nsamples(psm.DS1)
length(unique(sample_data(ps3.DS1)$subjectID))
psm.DS2 <- merge_samples_mean(ps3.DS2, "subjectID")
nsamples(psm.DS2)
length(unique(sample_data(ps3.DS2)$subjectID))
psm.DS3 <- merge_samples_mean(ps3.DS3, "subjectID")
nsamples(psm.DS3)
length(unique(sample_data(ps3.DS3)$subjectID))
# 'fix' subject ids by renaming merged subjectID with rownames
# 'fix' seroconversion
sample_data(psm.DS1)$subjectID
sample_data(psm.DS1)$subjectID <- rownames(sample_data(psm.DS1))
sample_data(psm.DS1)$subjectID
sample_data(psm.DS1)$seroconversion
sample_data(psm.DS1)$seroconversion <-  factor(sample_data(psm.DS1)$seroconversion, labels = c("No","Yes"))
sample_data(psm.DS1)$seroconversion
sample_data(psm.DS1)$vaccination_proximity
sample_data(psm.DS1)$vaccination_proximity <- "DS1"
sample_data(psm.DS1)$vaccination_proximity
sample_data(psm.DS2)$subjectID
sample_data(psm.DS2)$subjectID <- rownames(sample_data(psm.DS2))
sample_data(psm.DS2)$seroconversion
sample_data(psm.DS2)$seroconversion <- factor(sample_data(psm.DS2)$seroconversion, labels = c("No", "Yes"))
sample_data(psm.DS2)$vaccination_proximity
sample_data(psm.DS2)$vaccination_proximity <- "DS2"
sample_data(psm.DS2)$subjectID
sample_data(psm.DS2)$seroconversion
sample_data(psm.DS2)$vaccination_proximity
sample_data(psm.DS3)$subjectID
sample_data(psm.DS3)$subjectID <- rownames(sample_data(psm.DS3))
sample_data(psm.DS3)$seroconversion
sample_data(psm.DS3)$seroconversion <- factor(sample_data(psm.DS3)$seroconversion, labels = c("No", "Yes"))
sample_data(psm.DS3)$vaccination_proximity
sample_data(psm.DS3)$vaccination_proximity <- "DS3"
sample_data(psm.DS3)$subjectID
sample_data(psm.DS3)$seroconversion
sample_data(psm.DS3)$vaccination_proximity
# Chunk 10: assign color to each phylum
Phylumcolor<-c("Actinobacteria"="#c51b7d","Bacteroidetes"= "#e9a3c9", "Firmicutes"= "#fde0ef", "Proteobacteria"="#a1d76a")
averaged_raw <- ps3 %>% psmelt()
averaged_raw
IgA_distri <- ggplot(averaged_raw, aes(x = subjectID, y = postvaccination_IgA_titer, fill = Phylum)) + theme_bw() +
geom_bar(stat = "identity", width = 0.85, position="fill") +
facet_grid(~vaccination_proximity, scales = "free", space = "free") +
facet_wrap(~pre_post, nrow=1)+
labs(title= "", y = "Relative abundance", x = "") +
theme(legend.position = "",  panel.grid = element_blank()) +
theme(plot.title = element_text(hjust=0, angle = 0, family= "Arial", size = 12, face="bold"), axis.text = element_text(angle = 0, family= "Arial", size = 12), plot.margin=unit(c(0,0,0,0), "cm"))+
scale_fill_manual(values = Phylumcolor)
p.comm.avg.DS1
IgA_distri <- ggplot(averaged_raw, aes(x = subjectID, y = postvaccination_IgA_titer, fill = Phylum))
p.comm.avg.DS1
IgA_distri <- ggplot(averaged_raw, aes(x = subjectID, y = postvaccination_IgA_titer))
p.comm.avg.DS1
IgA_distri <- ggplot(averaged_raw, aes(x = subjectID, y = postvaccination_IgA_titer))
IgA_distri
IgA_distri <- ggplot(averaged_raw, aes(x = subjectID, y = postvaccination_IgA_titer))+
geom_bar()
IgA_distri
IgA_distri <- ggplot(averaged_raw, aes(x = subjectID, y = postvaccination_IgA_titer))+
theme_bw() +
geom_bar(stat = "identity", width = 0.85, position="fill")
IgA_distri
averaged_raw
IgA_distri <- ggplot(averaged_raw, aes(x = subjectID, y = postvaccination_IgA_titer))+
theme_bw() +
geom_bar()
IgA_distri
IgA_distri <- ggplot(averaged_raw, aes(x = subjectID, y = postvaccination_IgA_titer))+
theme_bw() +
geom_bar(stat = "identity")
IgA_distri
averaged_raw <- ps3 %>%
arrange(postvaccination_IgA_titer) %>%
psmelt()
averaged_raw <- ps3 %>%
psmelt() %>%
arrange(postvaccination_IgA_titer)
IgA_distri <- ggplot(averaged_raw, aes(x = subjectID, y = postvaccination_IgA_titer))+
theme_bw() +
geom_bar(stat = "identity")
IgA_distri
IgA_distri <- ggplot(averaged_raw, aes(x = subjectID, y = postvaccination_IgA_titer))+
theme_bw() +
geom_bar(stat = "identity")+
facet_wrap(seroconversion)
IgA_distri <- ggplot(averaged_raw, aes(x = subjectID, y = postvaccination_IgA_titer))+
theme_bw() +
geom_bar(stat = "identity")+
facet_wrap("seroconversion")
IgA_distri
averaged_raw <- ps3 %>%
psmelt() %>%
arrange(postvaccination_IgA_titer) %>%
mutate(postvaccination_IgA_titer=factor(postvaccination_IgA_titer, levels=postvaccination_IgA_titer))
IgA_distri <- ggplot(averaged_raw, aes(x = subjectID, y = postvaccination_IgA_titer))+
theme_bw() +
geom_bar(stat = "identity")+
facet_wrap("seroconversion")
IgA_distri
averaged_raw <- ps3 %>%
psmelt()
level(averaged_raw$postvaccination_IgA_titer)
levels(averaged_raw$postvaccination_IgA_titer)
arrange(averaged_raw, postvaccination_IgA_titer)
IgA_distri <- ggplot(averaged_raw, aes(x = subjectID, y = postvaccination_IgA_titer))+
theme_bw() +
geom_bar(stat = "identity")+
facet_wrap("seroconversion")
IgA_distri
IgA_distri <- ggplot(averaged_raw, aes(x = subjectID, y = postvaccination_IgA_titer), colour=seroconversion)+
theme_bw() +
geom_bar(stat = "identity")
IgA_distri
IgA_distri <- ggplot(averaged_raw, aes(x = subjectID, y = postvaccination_IgA_titer, colour=seroconversion))+
theme_bw() +
geom_bar(stat = "identity")
IgA_distri
install.packages(reshape2)
install.packages("reshape2")
devtools::install_github("hadley/reshape")
IgA_box <- ggboxplot(averaged_raw, x = seroconversion, y = postvaccination_IgA_titer, color=seroconversion)+
theme_bw() +
geom_point(size=2, alpha = 0.7) +
theme(axis.text.x = element_text(angle = 90))
# Chunk 1: initiate-environment
# Global knitr option
knitr::opts_chunk$set(fig.width=8,
fig.height=6,
fig.path="./seroconversion_figures",
dev='png',
warning=FALSE,
message=FALSE)
# Load libraries
library("tidyverse"); packageVersion("tidyverse")
library("phyloseq"); packageVersion("phyloseq")
library("RColorBrewer"); packageVersion("RColorBrewer")
library("vegan"); packageVersion("vegan")
library("knitr"); packageVersion("knitr")
library("ggpubr"); packageVersion("ggpubr")
library("DESeq2"); packageVersion("DESeq2")
library("tidylog"); packageVersion("tidylog")
library("ggplot2"); packageVersion("ggplot2")
library("viridis"); packageVersion("viridis")
library("DAtest"); packageVersion("DAtest")
library("reshape"); packageVersion("reshape")
# Chunk 2: initiate-data
# Load Phyloseq Object generated in *_preprocessing.Rmd documents
ps0 <- readRDS("./ps0.rotabiome.rdp_SE.RDS")
ps0
# Load mapping file
map <- import_qiime_sample_data("./rotabiome_16S_mapping_G1P_G2P_final.txt")
ps0 <- merge_phyloseq(ps0, map)
ps0
tax_table(ps0)
# View sample variables
sample_variables(ps0)
# Remove sample that has mostly missing (NA) information
ps0 <- subset_samples(ps0, seq_id != "356.Armah.19888")
# Remove sample with incorrect age data
ps0 <- subset_samples(ps0, seq_id != "179.Armah.19866")
# Remove late collected Dose 1 samples (> 100 days out)
ps0 <- subset_samples(ps0, seq_id != "364.Armah.19896")
ps0 <- subset_samples(ps0, seq_id != "23.Armah.19931")
# Remove late collected Dose 2 sample (> 130 days out)
ps0 <- subset_samples(ps0, seq_id != "141.Armah.20044")
ps0
# View sample variables & generate basic stats
sample_variables(ps0)
sd(sample_sums(ps0))
get_taxa_unique(ps0,"Phylum")
ntaxa(ps0)
nsamples(ps0)
# Chunk 3: factor-adjustments
# Factor re-ordering, relabelling, etc.
# Reorder it so pre appears before post
levels(sample_data(ps0)$pre_post)
sample_data(ps0)$pre_post <- factor(sample_data(ps0)$pre_post, levels = c("pre", "post"))
levels(sample_data(ps0)$pre_post)
# Convert factors into numeric
sample_data(ps0)$age_stool_collection <- as.numeric(as.character(sample_data(ps0)$age_stool_collection))
sample_data(ps0)$days_pre_or_post_vaccination <- as.numeric(as.character(sample_data(ps0)$days_pre_or_post_vaccination))
sample_data(ps0)$age_at_first_vac <- as.numeric(as.character(sample_data(ps0)$age_at_first_vac))
sample_data(ps0)$age_at_final_vac <- as.numeric(as.character(sample_data(ps0)$age_at_final_vac))
sample_data(ps0)$age_at_blood_draw <- as.numeric(as.character(sample_data(ps0)$age_at_blood_draw))
sample_data(ps0)$days_between_last_vaccination_and_blood_draw <- as.numeric(as.character(sample_data(ps0)$days_between_last_vaccination_and_blood_draw))
sample_data(ps0)$height_cm <- as.numeric(as.character(sample_data(ps0)$height_cm))
sample_data(ps0)$weight_kg <- as.numeric(as.character(sample_data(ps0)$weight_kg))
sample_data(ps0)$postvaccination_IgA_titer <- as.numeric(as.character(sample_data(ps0)$postvaccination_IgA_titer))
# Chunk 4: data-assessment
# Create a new data frame of the sorted row sums, a column of sorted values from 1 to the total number of individuals/counts for each RSV and a categorical variable stating these are all RSVs.
readsumsdf = data.frame(nreads = sort(taxa_sums(ps0), TRUE),
sorted = 1:ntaxa(ps0),
type = "ASVs")
# Add a column of sample sums (total number of individuals per sample)
readsumsdf = rbind(readsumsdf,
data.frame(nreads = sort(sample_sums(ps0), TRUE),
sorted = 1:nsamples(ps0),
type = "Samples"))
# Make a data frame with a column for the read counts of each sample for histogram production
sample_sum_df <- data.frame(sum = sample_sums(ps0))
# Make plots
# Generates a bar plot with # of reads (y-axis) for each taxa. Sorted from most to least abundant
# Generates a second bar plot with # of reads (y-axis) per sample. Sorted from most to least
p.reads = ggplot(readsumsdf, aes(x = sorted, y = nreads)) +
geom_bar(stat = "identity") +
ggtitle("ASV Assessment") +
scale_y_log10() +
facet_wrap(~type, scales = "free") +
ylab("# of Reads")
# Histogram of the number of Samples (y-axis) at various read depths
p.reads.hist <- ggplot(sample_sum_df, aes(x = sum)) +
geom_histogram(color = "black", fill = "firebrick3", binwidth = 150) +
ggtitle("Distribution of sample sequencing depth") +
xlab("Read counts") +
ylab("# of Samples")
# Final plot, side-by-side
ggarrange(p.reads, p.reads.hist, ncol = 2)
# Basic summary statistics
summary(sample_sums(ps0))
sd(sample_sums(ps0))
# Chunk 5: sample-removal-identification
# Format a data table to combine sample summary data with sample variable data
ss <- sample_sums(ps0)
sd <- as.data.frame(sample_data(ps0)) # useful to coerce the phyloseq object into an R data frame
ss.df <- merge(sd, data.frame("ASVs" = ss), by ="row.names") # merge ss with sd by row names. Rename ss to RSVs in the new data frame
# Plot the data by the treatment variable
y = 1e4 # Set a threshold for the minimum number of acceptable reads. Can start as a guess
x = "seroconversion" # Set the x-axis variable you want to examine
p.ss.boxplot <- ggplot(ss.df, aes(x=age_stool_collection, y = ASVs, color = seroconversion)) +
geom_point(alpha = 0.6, size = 3, shape = "square") +
scale_y_log10() +
geom_hline(yintercept = y, lty = 2) +
labs(x = "Age @ Stool Collection")
p.ss.boxplot
# Chunk 6: sample-outlier-removal
# Remove samples with fewer than 1,000 sequences
nsamples(ps0)
ps1 <- prune_samples(sample_sums(ps0) >= y, ps0)
nsamples(ps1)
min(sample_sums(ps1))
# Chunk 7: prevalence-assessment
# Begin by removing sequences that were classified as either mitochondria or chlorplast
ps1 # Check the number of taxa prior to removal
ps2 <- ps1 %>%
subset_taxa(
Family  != "mitochondria" &
Class   != "Chloroplast" &
Phylum != "Cyanobacteria/Chloroplast"
)
ps2 # Confirm that the taxa were removed
# Prevelance estimation
# Calculate feature prevelance across the data set
prevdf <- apply(X = otu_table(ps2),MARGIN = ifelse(taxa_are_rows(ps2), yes = 1, no = 2),FUN = function(x){sum(x > 0)})
# Add taxonomy and total read counts to prevdf
prevdf <- data.frame(Prevalence = prevdf, TotalAbundance = taxa_sums(ps2), tax_table(ps2))
# Create a table of Phylum, their mean abundances across all samples, and the number of samples they were detected in
plyr::ddply(prevdf, "Phylum", function(df1){cbind(mean(df1$Prevalence),sum(df1$Prevalence))})
# Reorder based on visual inspection of relative dominance of each taxa for plotting
prevdf$Phylum <- factor(prevdf$Phylum, levels = c("Firmicutes", "Actinobacteria", "Proteobacteria", "Bacteroidetes", "Verrucomicrobia", "Fusobacteria", "Deinococcus-Thermus", "Euryarchaeota", "Deferribacteres", "Lentisphaerae", "Spirochaetes", "Synergistetes", "Tenericutes"))
#Prevalence plot
prevdf1 <- subset(prevdf, Phylum %in% get_taxa_unique(ps2, "Phylum"))
p.prevdf1 <- ggplot(prevdf1, aes(TotalAbundance, Prevalence / nsamples(ps2),color=Genus)) +
geom_hline(yintercept = 0.03, alpha = 0.5, linetype = 2) +
geom_point(size = 3, alpha = 0.7) +
scale_x_log10() +
xlab("Total Abundance") + ylab("Prevalence [Frac. Samples]") +
facet_wrap(~Phylum) +
theme(legend.position="none") +
ggtitle("Phylum Prevelence in All Samples\nColored by Genus")
p.prevdf1
# Chunk 8: taxon-cleaning
# Remove specific taxa
# Define a variable with taxa to remove
get_taxa_unique(ps2, "Phylum")
filterPhyla = c("Lentisphaerae", "Spirochaetes", "Synergistetes", "Deinococcus-Thermus", "Deferribacteres", "Tenericutes", "Euryarchaeota", "Verrucomicrobia", "Fusobacteria")
ps2 # Check the number of taxa prior to removal
ps2 <- subset_taxa(ps2, !Phylum %in% filterPhyla)
ps2 # Confirm the taxa were removed
get_taxa_unique(ps2, "Phylum")
summary(ps2)
# Chunk 9: average-ASV-per-subject-per-dose
##### Normalization #######
# Scales reads by
# 1) taking proportions,
# 2) multiplying by a given library size of n
# 3) rounding down
scale_reads <- function(physeq, n) {
physeq.scale <-
transform_sample_counts(physeq, function(x) {
(n * x/sum(x))
})
otu_table(physeq.scale) <- floor(otu_table(physeq.scale))
physeq.scale <- prune_taxa(taxa_sums(physeq.scale) > 0, physeq.scale)
return(physeq.scale)
}
###### Merge functions ############
#Merge samples by averaging OTU countsinstead of summing
merge_samples_mean <- function(physeq, group){
# Calculate the number of samples in each group
group_sums <- as.matrix(table(sample_data(physeq)[ ,group]))[,1]
# Merge samples by summing
merged <- merge_samples(physeq, group)
# Divide summed OTU counts by number of samples in each group to get mean
# Calculation is done while taxa are columns
x <- as.matrix(otu_table(merged))
if(taxa_are_rows(merged)){ x<-t(x) }
out <- floor(t(x/group_sums))
# Return new phyloseq object with
out <- otu_table(out, taxa_are_rows = TRUE)
otu_table(merged) <- out
return(merged)
}
# Sacle Reads
ps3 <- scale_reads(ps2, 1e5)
# Subset by dose
levels(sample_data(ps3)$vaccination_proximity)
ps3.DS1 <- subset_samples(ps3, vaccination_proximity == "DS1")
levels(sample_data(ps3.DS1)$vaccination_proximity)
summary(taxa_sums(ps3.DS1))
ps3.DS1 <- prune_taxa(taxa_sums(ps3.DS1)>0, ps3.DS1)
summary(taxa_sums(ps3.DS1))
ps3.DS2 <- subset_samples(ps3, vaccination_proximity == "DS2")
levels(sample_data(ps3.DS2)$vaccination_proximity)
summary(taxa_sums(ps3.DS2))
ps3.DS2 <- prune_taxa(taxa_sums(ps3.DS2)>0, ps3.DS2)
summary(taxa_sums(ps3.DS2))
ps3.DS3 <- subset_samples(ps3, vaccination_proximity == "DS3")
levels(sample_data(ps3.DS3)$vaccination_proximity)
summary(taxa_sums(ps3.DS3))
ps3.DS3 <- prune_taxa(taxa_sums(ps3.DS3)>0, ps3.DS3)
summary(taxa_sums(ps3.DS3))
# Count number of subjects
length(unique(sample_data(ps3)$subjectID))
length(unique(sample_data(ps3.DS1)$subjectID))
length(unique(sample_data(ps3.DS2)$subjectID))
length(unique(sample_data(ps3.DS3)$subjectID))
# Transform all variables to factors just in case...
df <- as.data.frame(lapply(sample_data(ps3),function (y) if(class(y)!="factor" ) as.factor(y) else y),stringsAsFactors=T)
row.names(df) <- sample_names(ps3)
sample_data(ps3) <- sample_data(df)
df_DS1 <- as.data.frame(lapply(sample_data(ps3.DS1),function (y) if(class(y)!="factor" ) as.factor(y) else y),stringsAsFactors=T)
row.names(df_DS1) <- sample_names(ps3.DS1)
sample_data(ps3.DS1) <- sample_data(df_DS1)
df_DS2 <- as.data.frame(lapply(sample_data(ps3.DS2),function (y) if(class(y)!="factor" ) as.factor(y) else y),stringsAsFactors=T)
row.names(df_DS2) <- sample_names(ps3.DS2)
sample_data(ps3.DS2) <- sample_data(df_DS2)
df_DS3 <- as.data.frame(lapply(sample_data(ps3.DS3),function (y) if(class(y)!="factor" ) as.factor(y) else y),stringsAsFactors=T)
row.names(df_DS3) <- sample_names(ps3.DS3)
sample_data(ps3.DS3) <- sample_data(df_DS3)
# Merge samples on subjectID
psm <- merge_samples_mean(ps3, "subjectID")
nsamples(psm)
length(unique(sample_data(ps3)$subjectID))
psm.DS1 <- merge_samples_mean(ps3.DS1, "subjectID")
nsamples(psm.DS1)
length(unique(sample_data(ps3.DS1)$subjectID))
psm.DS2 <- merge_samples_mean(ps3.DS2, "subjectID")
nsamples(psm.DS2)
length(unique(sample_data(ps3.DS2)$subjectID))
psm.DS3 <- merge_samples_mean(ps3.DS3, "subjectID")
nsamples(psm.DS3)
length(unique(sample_data(ps3.DS3)$subjectID))
# 'fix' subject ids by renaming merged subjectID with rownames
# 'fix' seroconversion
sample_data(psm.DS1)$subjectID
sample_data(psm.DS1)$subjectID <- rownames(sample_data(psm.DS1))
sample_data(psm.DS1)$subjectID
sample_data(psm.DS1)$seroconversion
sample_data(psm.DS1)$seroconversion <-  factor(sample_data(psm.DS1)$seroconversion, labels = c("No","Yes"))
sample_data(psm.DS1)$seroconversion
sample_data(psm.DS1)$vaccination_proximity
sample_data(psm.DS1)$vaccination_proximity <- "DS1"
sample_data(psm.DS1)$vaccination_proximity
sample_data(psm.DS2)$subjectID
sample_data(psm.DS2)$subjectID <- rownames(sample_data(psm.DS2))
sample_data(psm.DS2)$seroconversion
sample_data(psm.DS2)$seroconversion <- factor(sample_data(psm.DS2)$seroconversion, labels = c("No", "Yes"))
sample_data(psm.DS2)$vaccination_proximity
sample_data(psm.DS2)$vaccination_proximity <- "DS2"
sample_data(psm.DS2)$subjectID
sample_data(psm.DS2)$seroconversion
sample_data(psm.DS2)$vaccination_proximity
sample_data(psm.DS3)$subjectID
sample_data(psm.DS3)$subjectID <- rownames(sample_data(psm.DS3))
sample_data(psm.DS3)$seroconversion
sample_data(psm.DS3)$seroconversion <- factor(sample_data(psm.DS3)$seroconversion, labels = c("No", "Yes"))
sample_data(psm.DS3)$vaccination_proximity
sample_data(psm.DS3)$vaccination_proximity <- "DS3"
sample_data(psm.DS3)$subjectID
sample_data(psm.DS3)$seroconversion
sample_data(psm.DS3)$vaccination_proximity
# Chunk 10: assign color to each phylum
Phylumcolor<-c("Actinobacteria"="#c51b7d","Bacteroidetes"= "#e9a3c9", "Firmicutes"= "#fde0ef", "Proteobacteria"="#a1d76a")
# Chunk 11: IgA distribution
averaged_raw <- ps3 %>%
psmelt() %>%
mutate(postvaccination_IgA_titer = as.numeric(postvaccination_IgA_titer)) %>%
arrange(postvaccination_IgA_titer)
#get the correct order
new.order <- ps3 %>%
psmelt() %>%
arrange(postvaccination_IgA_titer) %>%
distinct(subjectID) %>%
deframe()
averaged_raw$subjectID <- factor(averaged_raw$subjectID,levels = new.order)
IgA_distri <- ggplot(averaged_raw, aes(x = subjectID, y = postvaccination_IgA_titer, fill=seroconversion))+
theme_bw() +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 90))
IgA_distri
IgA_box <- ggboxplot(averaged_raw, x = seroconversion, y = postvaccination_IgA_titer, color=seroconversion)+
theme_bw() +
geom_point(size=2, alpha = 0.7) +
theme(axis.text.x = element_text(angle = 90))
IgA_box
IgA_box <- ggboxplot(averaged_raw, x = "seroconversion", y = "postvaccination_IgA_titer", color=seroconversion)+
theme_bw() +
geom_point(size=2, alpha = 0.7) +
theme(axis.text.x = element_text(angle = 90))
averaged_raw
IgA_box <- ggboxplot(averaged_raw, x = "seroconversion", y = "postvaccination_IgA_titer", color=seroconversion)+
theme_bw() +
geom_point(size=2, alpha = 0.7) +
theme(axis.text.x = element_text(angle = 90))
IgA_box <- ggboxplot(averaged_raw, x = "seroconversion", y = "postvaccination_IgA_titer", color=seroconversion)+
theme_bw()
IgA_box <- ggplot(averaged_raw, aes(x = subjectID, y = postvaccination_IgA_titer, fill=seroconversion))+
theme_bw() +
geom_boxplot()+
geom_point()
IgA_box
IgA_box <- ggplot(averaged_raw, aes(x = seroconversion, y = postvaccination_IgA_titer, fill=seroconversion))+
theme_bw() +
geom_boxplot()+
geom_point()
IgA_box
IgA_box <- ggplot(averaged_raw, aes(x = seroconversion, y = postvaccination_IgA_titer, fill=seroconversion))+
theme_bw() +
geom_boxplot()+
geom_point(position=jitter())
?geom_point
IgA_box <- ggplot(averaged_raw, aes(x = seroconversion, y = postvaccination_IgA_titer, fill=seroconversion, add="jitter"))+
theme_bw() +
geom_boxplot()+
geom_point()
IgA_box
write.csv(averaged_raw," /Users/AK/Desktop/WashU/Projects/Handley_Lab/Rotabiome/Manuscript/Submissions/1st_Cell_host_microbe_20210603/Rotabiome_clean_Rmd/Rotabiome_Bacteriome_Rmd/ps3.csv", row.names = FALSE)
write.csv(averaged_raw,".\ps3.csv", row.names = FALSE)
write.csv(averaged_raw,"./ps3.csv", row.names = FALSE)
averaged_raw <- psm.DS1 %>%
psmelt() %>%
mutate(postvaccination_IgA_titer = as.numeric(postvaccination_IgA_titer)) %>%
arrange(postvaccination_IgA_titer)
IgA_distri <- ggplot(averaged_raw, aes(x = subjectID, y = postvaccination_IgA_titer, fill=seroconversion))+
theme_bw() +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 90))
IgA_distri
write.csv(averaged_raw,"./psm.DS1.csv", row.names = FALSE)
write_phyloseq(psm.DS1, type = "METADATA", path = getwd())
averaged_raw <- psm.DS1 %>%
psmelt() %>%
mutate(postvaccination_IgA_titer = as.numeric(postvaccination_IgA_titer)) %>%
arrange(postvaccination_IgA_titer)
#get the correct order
new.order <- psm.DS1 %>%
psmelt() %>%
arrange(postvaccination_IgA_titer) %>%
distinct(subjectID) %>%
deframe()
averaged_raw$subjectID <- factor(averaged_raw$subjectID,levels = new.order)
IgA_distri <- ggplot(averaged_raw, aes(x = subjectID, y = postvaccination_IgA_titer, fill=seroconversion))+
theme_bw() +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 90))
IgA_distri
averaged_raw
IgA_distri <- ggplot(psm.DS1, aes(x = subjectID, y = postvaccination_IgA_titer, fill=seroconversion))+
theme_bw() +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 90))
